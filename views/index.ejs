<script src="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.js"></script>
<script src="config/dual-slider.js" defer></script>
<%- include ('./partials/popup') %>
<%- include ('./partials/popup2') %>
<%- include('./partials/header') %>
<div style="display: flex;flex-direction: column;">
    <div class="searchDiv">
        <button id="showMap" class="btn btn-block " style="display: none;" 
                onclick="this.classList.remove('btnActive');initializeMap();
                document.getElementById('showList').classList.add('btnActive');
                document.getElementById('map').classList.add('windowActive');
                document.getElementById('filterDiv').classList.remove('windowActive');
                document.getElementById('search').classList.remove('windowActive')">Show Mapüåê</button>

        <button id="showList" class="btn btn-block btnActive m-0" style="display: none;"
                onclick="this.classList.remove('btnActive');
                getPlaces();
                document.getElementById('filterDiv').classList.add('windowActive');
                document.getElementById('showMap').classList.add('btnActive');
                document.getElementById('search').classList.add('windowActive');
                document.getElementById('map').classList.remove('windowActive')">Show ListüìÉ</button>
    </div>
    <div id="filterDiv" class="filterDiv windowActive" style="display: none;">
        <input type="text" placeholder="Name of accommodation">
        <select name="county" id="modalLocation">
            <optgroup label="England">
                <option>Bedfordshire</option>
                <option>Berkshire</option>
                <option>Bristol</option>
                <option>Buckinghamshire</option>
                <option>Cambridgeshire</option>
                <option>Cheshire</option>
                <option>City of London</option>
                <option>Cornwall</option>
                <option>Cumbria</option>
                <option>Derbyshire</option>
                <option>Devon</option>
                <option>Dorset</option>
                <option>Durham</option>
                <option>East Riding of Yorkshire</option>
                <option>East Sussex</option>
                <option>Essex</option>
                <option>Gloucestershire</option>
                <option>Greater London</option>
                <option>Greater Manchester</option>
                <option>Hampshire</option>
                <option>Herefordshire</option>
                <option>Hertfordshire</option>
                <option>Isle of Wight</option>
                <option>Kent</option>
                <option>Lancashire</option>
                <option>Leicestershire</option>
                <option>Lincolnshire</option>
                <option>Merseyside</option>
                <option>Norfolk</option>
                <option>North Yorkshire</option>
                <option>Northamptonshire</option>
                <option>Northumberland</option>
                <option>Nottinghamshire</option>
                <option>Oxfordshire</option>
                <option>Rutland</option>
                <option>Shropshire</option>
                <option>Somerset</option>
                <option>South Yorkshire</option>
                <option>Staffordshire</option>
                <option>Suffolk</option>
                <option>Surrey</option>
                <option>Tyne and Wear</option>
                <option>Warwickshire</option>
                <option>West Midlands</option>
                <option>West Sussex</option>
                <option>West Yorkshire</option>
                <option>Wiltshire</option>
                <option>Worcestershire</option>
            </optgroup>
            <optgroup label="Wales">
                <option>Anglesey</option>
                <option>Brecknockshire</option>
                <option>Caernarfonshire</option>
                <option>Carmarthenshire</option>
                <option>Cardiganshire</option>
                <option>Denbighshire</option>
                <option>Flintshire</option>
                <option>Glamorgan</option>
                <option>Merioneth</option>
                <option>Monmouthshire</option>
                <option>Montgomeryshire</option>
                <option>Pembrokeshire</option>
                <option>Radnorshire</option>
            </optgroup>
            <optgroup label="Scotland">
                <option>Aberdeenshire</option>
                <option>Angus</option>
                <option>Argyllshire</option>
                <option>Ayrshire</option>
                <option>Banffshire</option>
                <option>Berwickshire</option>
                <option>Buteshire</option>
                <option>Cromartyshire</option>
                <option>Caithness</option>
                <option>Clackmannanshire</option>
                <option>Dumfriesshire</option>
                <option>Dunbartonshire</option>
                <option>East Lothian</option>
                <option>Fife</option>
                <option>Inverness-shire</option>
                <option>Kincardineshire</option>
                <option>Kinross</option>
                <option>Kirkcudbrightshire</option>
                <option>Lanarkshire</option>
                <option>Midlothian</option>
                <option>Morayshire</option>
                <option>Nairnshire</option>
                <option>Orkney</option>
                <option>Peeblesshire</option>
                <option>Perthshire</option>
                <option>Renfrewshire</option>
                <option>Ross-shire</option>
                <option>Roxburghshire</option>
                <option>Selkirkshire</option>
                <option>Shetland</option>
                <option>Stirlingshire</option>
                <option>Sutherland</option>
                <option>West Lothian</option>
                <option>Wigtownshire</option>
            </optgroup>
            <optgroup label="Northern Ireland">
                <option>Antrim</option>
                <option>Armagh</option>
                <option>Down</option>
                <option>Fermanagh</option>
                <option>Londonderry</option>
                <option>Tyrone</option>
            </optgroup>
        </select>
        <select name="county" id="modalLocation">
            <option>Hotel</option>
            <option>B&B</option>
            <option>RB&B</option>
            <option>Hostel</option>
            <option>Other</option>
        </select>
        
        <div class="input-range ml-2">
            <input id="slider" type="range" style="margin: 4px 0 0 0;" multiple value="1,99" />
            <div class="range">
               <div class="lowGBPAmount"></div>  <!-- document.getElementsByClassName('lowGBPAmount')[0].innerHTML -->
                <div class="highGBPAmount"></div>
            </div>
        </div>

    </div>
    <div id="map" class="rounded windowActive" style="position:absolute;height:80vh; width: 95vw;bottom:3%;left:2%;display: none;"></div>
    <div id="search" class="rounded " style="position:absolute;height:80vh; width: 95vw;bottom:3%;left:2%;display: none;"><%- include('./partials/search') %></div>
</div>
<input hidden type="text" name="start" class="input" id="start" placeholder="Choose starting point" style="display: none;"/>
<input hidden type="text" name="end" class="input" id="destination" placeholder="Choose starting point" style="display: none;"/>
<script defer>

/*===================================================
                 ROUTING           
 ===================================================*/
 function getLocation() {
     if (navigator.geolocation) {
         navigator.geolocation.getCurrentPosition(showPosition);
     } else {
         console.log("Geolocation is not supported by this browser.")
     }
 }
 function showPosition(position) {
     document.getElementById('start').value = [position.coords.latitude, position.coords.longitude]
 }
 getLocation()

 /*===================================================
                 MAP INIT               
 ===================================================*/
 var map = L.map('map')

 initializeMap()
 function addWP1(param1, param2) { // waypoint1

     document.getElementById('start').value = [param1, param2]
     var imgz = document.getElementsByTagName('img')
     for (i = 0; i < document.getElementsByTagName('img').length; i++) {
         if (imgz[i].alt == "fromHere") { imgz[i].remove() }
     }
     var fromHere = L.marker([param1, param2], { icon: startIcon, alt: "fromHere" }).addTo(map).bindPopup("from location").openPopup();

 }

 function addWP2(param1, param2) {// waypoint2

     document.getElementById('destination').value = [param1, param2]
     var imgz = document.getElementsByTagName('img')
     for (i = 0; i < document.getElementsByTagName('img').length; i++) {
         if (imgz[i].alt == "toHere") { imgz[i].remove() }
     }
     var toHere = L.marker([param1, param2]).addTo(map).bindPopup("to location").openPopup();
     initializeMap()
 }
 function resolveAfterMSeconds(time) { // delayer
     return new Promise(resolve => {
         setTimeout(() => {
             resolve('resolved');
         }, time);
     });
 }
    

 async function initializeMap() {

     map.remove()
     await resolveAfterMSeconds(100)
     console.log("loading...");
     map = L.map('map')
     map.on('locationerror', onLocationError);
     map.on('locationfound', onLocationFound);

     /*===================================================
                 OSM TILE LAYER             
     ===================================================*/
     var osm = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
         attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
     });
     osm.addTo(map);
     

 /*===================================================
                 ICONS               
 ===================================================*/
     var baseIcon = L.Icon.extend({
             options: {
                 iconUrl: "./img/icon1.png", iconSize: [35, 35], iconAnchor: [5, 5], popupAnchor: [5, -5]
             }
         })

     var starIcon = new baseIcon({ iconUrl: "./img/star.png" })
     var homeIcon = new baseIcon({ iconUrl: "./img/home.png" })
     var workIcon = new baseIcon({ iconUrl: "./img/work.png" })
     var parkingIcon = new baseIcon({ iconUrl: "./img/parking.png" })
     var iconParking = new baseIcon({ iconUrl: "./img/parking.png" })
     
     var iconHotel = new baseIcon({ iconUrl: "./img/hotel.png" })
     var iconHostel = new baseIcon({ iconUrl: "./img/hostel.png" })
     var iconBnB = new baseIcon({ iconUrl: "./img/bnb.png" })
     var iconRBnB = new baseIcon({ iconUrl: "./img/rbnb.png" })
     
 /*===================================================
                 BUILDING MARKS              
 ===================================================*/
     // looping through the points from the database to dynamically add the points 
     // each time the map is called
     
     <% for (let c = 0; c < points.length; c++) { %>
            marker<%=c%> = L.marker([<%=points[c].latitude%>,<%=points[c].longitude%>],{ <%if(String(points[c].icon).length > 4){%>icon: <%=points[c].icon%>,<%}%> alt: 'marker<%=c%>', <%if(String(points[c].description).length > 4){%>description:'<%=points[c].description%>'<%}%> } )
            .bindPopup('<%if(String(points[c].photo).length > 4){%><img class="popupImg" src="<%=points[c].photo%>"><%}%><h4><%=points[c].name%></h4><h6><%=points[c].type%></h6><span><%=points[c].location%></span><br><%if(String(points[c].description).length > 0){%><%=points[c].description%><%}%><form class="popupHiddenForm"><input hidden id="pointID" name="pointID" value="<%=points[c].ID%>"><button onclick="deleteThisPoint(`<%=points[c].ID%>`,`marker<%=c%>`)" type="button" ><img src="/img/deletemark.png" class="popupImgs" alt="Remove Mark"></button></button><button style="border:none;background-color:transparent" type="button" onclick="addWP2(<%=points[c].latitude%>,<%=points[c].longitude%>)"><img src="./img/direction.png" alt="Get Directions" id="directionIcon" style="width:45px; height:45px;background-color:transparent;"></button><button style="border:none;background-color:transparent" type="button" onclick="openAddMarkModal2(<%=points[c].ID%>)"><img src="./img/booknow.png" alt="Get Directions" id="directionIcon" style="width:45px; height:45px;background-color:transparent;"></button></form>').openPopup()
     <% } %>
                   
     /*===================================================
                             GROUP LAYER           
     ===================================================*/
     <%countz=1%>
    var hotels = L.layerGroup([
    <% if(typeof points != "undefined") { %>
        <% for (let c = 0; c < points.length; c++) { %>
            <% if(points[c].type == "Hotel"){ %>
            marker<%=c%>,
            <%countz++%>
            <%}%>
    <% } %> <%}%>
    ]).addTo(map)
    
    var bnbs = L.layerGroup([
    <% if(typeof points != "undefined") { %>
        <% for (let c = 0; c < points.length; c++) { %>
            <% if(points[c].type == "BnB"){ %>
            marker<%=c%>,
            <%countz++%>
            <%}%>
    <% } %> <%}%>
    ]).addTo(map)
    
    var rbnbs = L.layerGroup([
    <% if(typeof points != "undefined") { %>
        <% for (let c = 0; c < points.length; c++) { %>
            <% if(points[c].type == "RBnB"){ %>
            marker<%=c%>,
            <%countz++%>
            <%}%>
    <% } %> <%}%>
    ]).addTo(map)

    var hostels = L.layerGroup([
    <% if(typeof points != "undefined") { %>
        <% for (let c = 0; c < points.length; c++) { %>
            <% if(points[c].type == "Hostel"){ %>
            marker<%=c%>,
            <%countz++%>
            <%}%>
    <% } %> <%}%>
    ]).addTo(map)

    var other = L.layerGroup([
    <% if(typeof points != "undefined") { %>
        <% for (let c = 0; c < points.length; c++) { %>
            <% if(points[c].type != "Hotel" && points[c].type != "Hostel" && points[c].type != "RBnB" && points[c].type != "BnB" ){ %>
            marker<%=c%>,
            <%countz++%>
            <%}%>
    <% } %> <%}%>
    ]).addTo(map)
    
     /*===================================================
                             GPS / GEOLOCATION              
     ===================================================*/
     map.locate({ setView: true, maxZoom: 19 });
     function onLocationFound(e) {
         var radius = e.accuracy;
         var gps1 = L.marker(e.latlng).addTo(map).bindPopup("You are within " + radius + "<br>at " + e.latlng);
         var gps2 = L.circle(e.latlng, radius).addTo(map);
     }
     function onLocationError(e) {
         alert(e.message);
     }
     map.on('locationerror', onLocationError);
     map.on('locationfound', onLocationFound);

     /*===================================================
                 TILE LAYER               
     ===================================================*/
     L.control.scale({ metric: true, imperial: false, position: 'bottomleft' }).addTo(map) // scale

     googleStreets = L.tileLayer('http://{s}.google.com/vt/lyrs=m&x={x}&y={y}&z={z}', {
         maxZoom: 19,
         subdomains: ['mt0', 'mt1', 'mt2', 'mt3'],
         attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
     });
     googleStreets.addTo(map);

     // Satelite Layer
     googleSat = L.tileLayer('http://{s}.google.com/vt/lyrs=s&x={x}&y={y}&z={z}', {
         maxZoom: 19,
         subdomains: ['mt0', 'mt1', 'mt2', 'mt3'],
         attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
     });
     googleSat.addTo(map);

     googleTraffic = L.tileLayer('http://{s}.google.com/vt/lyrs=m@221097413,traffic&x={x}&y={y}&z={z}', {
         maxZoom: 19,
         subdomains: ['mt0', 'mt1', 'mt2', 'mt3'],
         attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
     });
     googleTraffic.addTo(map);

     /*===================================================
                 LAYER CONTROL               
     ===================================================*/

     var baseLayers = {
         "Satellite": googleSat,
         "GoogleMap": googleStreets,
         "OpenStreetMap": osm,
         "Traffic": googleTraffic,
     };

     var overlays = {
         "Hotels": hotels,
         "B&Bs": bnbs,
         "AirBnBs": rbnbs,
         "Hostels": hostels,
         "Others": other,
     };
     /*===================================================
                 LAYER BUTTON            
     ===================================================*/

     var layerz = L.control.layers(baseLayers, overlays, { position: 'bottomright' }).addTo(map);

      /*===================================================
                 ROUTING CONTROL              
     ===================================================*/
     var wp1 = String(document.getElementById('start').value).split(",")
     var wp2 = String(document.getElementById('destination').value).split(",")
     if (wp2.length > 1) {
         var rout = L.Routing.control({
             "mode": "driving",
             "driving_side": "right",
             waypoints: [
                 wayPoint1 = L.latLng(wp1),
                 wayPoint2 = L.latLng(wp2)
             ],
             show: true,
             units: 'imperial',
             autoRoute: true,
             collapsible: true,
             routeWhileDragging: true,
             lineOptions: { styles: [{ color: 'blue', opacity: 0.7, weight: 5 }] },
             geocoder: L.Control.Geocoder.nominatim({ geocodingQueryParams: { 'limit': '5' }, 'postcode': { dataset: 'DPA,LPI' } }),
             showAlternatives: true,
             altLineOptions: { styles: [{ color: 'grey', opacity: 0.8, weight: 5 }, { color: 'grey', opacity: 0.8, weight: 5 }] }
         }).addTo(map)
     } else {
         var rout = L.Routing.control({
             "mode": "driving",
             "driving_side": "right",
             waypoints: [
                 wayPoint1 = L.latLng(wp1)
             ],
             show: true,
             units: 'imperial',
             autoRoute: true,
             collapsible: true,
             routeWhileDragging: true,
             lineOptions: { styles: [{ color: 'blue', opacity: 0.7, weight: 5 }] },
             geocoder: L.Control.Geocoder.nominatim({ geocodingQueryParams: { 'limit': '5' }, 'postcode': { dataset: 'DPA,LPI' } }),
             showAlternatives: true,
             altLineOptions: { styles: [{ color: 'grey', opacity: 0.8, weight: 5 }, { color: 'grey', opacity: 0.8, weight: 5 }] }
         }).addTo(map)
     }
     var boundz = L.latLngBounds(wp1, wp2);
     map.fitBounds(boundz)

      /*===================================================
                 MAP ON CLICK POPUP          
     ===================================================*/
     function onMapClick(e) {
         L.popup()
             .setLatLng(e.latlng)
             .setContent("<div class='popupClick'>Location:<br><p contentEditable='true' id='wpz'>" + e.latlng.lat +", "+  e.latlng.lng + "</p>" +
                 `</div>
                 <div style="display: flex;justify-content: center;"><button onclick="openAddMarkModal(${e.latlng.lat}, ${e.latlng.lng})" style="border:none;background-color:transparent;" type="button"><img src="/img/addmark.png" class="popupImgs" alt="Add Mark"></button><button style='border:none;background-color:transparent' type='button' onclick='addWP2(${e.latlng.lat}, ${e.latlng.lng})'><img src="./img/direction.png" alt="Get Directions" id="directionIcon" style="width:45px; height:45px;background-color:transparent;"></button></div>`)
             .openOn(map);
     }
     map.on('click', onMapClick);
    }
 
</script>
